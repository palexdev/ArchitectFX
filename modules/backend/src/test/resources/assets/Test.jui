.deps {
  'io.github.palexdev:mfxcomponents:11.26.8'
}

.imports {
  'io.github.palexdev.mfxcore.builders.nodes.*',
  'io.github.palexdev.mfxcore.utils.*',
  'javafx.geometry.*',
  'javafx.scene.Node',
  'javafx.scene.layout.*',
  'javafx.scene.paint.Color',
  'javafx.scene.shape.Rectangle',
  'javafx.scene.text.Font',
  'io.github.palexdev.mfxcore.controls.Label'
}

StackPane {
  # Builder
  .builder: StackPaneBuilder.stackPane().addStyleClasses(String['pane']).getNode()
  # Configs
  StackPane.setMargin(this, Insets::(10.0){})
  CSSFragment$Builder.build().select('.pane')
    .border(Color.BLUE)
    .borderRadius('6.0')
    .background(Color.web('#FF000027'))
    .backgroundRadius('6.0')
    .applyOn(this)
  # Properties
  padding: Insets::(2.0, 5.0, 2.0, 5.0){}
  stylesheets = listOf(
    url('css/Test.css')
  )

  # Children
  Label::('Hello world!') {
    font: Font.font("JetBrainsMono NF Medium", 16.0)
    style: '-fx-text-fill: blue'
    padding: Insets::(12.0){}
  }

  # NOTE!! While it's true that the Rectangle will be shown in the UI, it won't appear as a node in the tree but rather
  # as an argument for the StackPane's constructor. In other words, the Rectangle will not be recognized as a child of
  # StackPane and its parent will be null
  StackPane::(Node[Rectangle::(150.0, 40.0) {
    arcWidth: 24.0
    arcHeight: 24.0
    style: '-fx-stroke: red; -fx-fill: #00FF0027;'
  }]) {}
}
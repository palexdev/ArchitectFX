plugins {
    id 'application'
}

version = "$afx_frontend"

dependencies {
    implementation(project(":backend"))

    implementation "io.github.palexdev:mfxcore:$mfxcore"
    implementation "io.github.palexdev:mfxcomponents:$materialfx"
    implementation "io.github.palexdev:virtualizedfx:$virtualizedfx"
    implementation "fr.brouillard.oss:cssfx:$cssfx"

    implementation name: 'nfx-core-1.0.2'
    implementation name: 'nfx-core-1.0.2', classifier: 'sources'

    implementation name: 'directory-watcher-0.19.0'
    implementation name: 'directory-watcher-0.19.0', classifier: 'sources'
}

javafx {
    modules = ['javafx.fxml', 'javafx.graphics']
}

application {
    mainModule = 'afx.frontend'
    mainClass = 'io.github.palexdev.architectfx.frontend.ArchitectFX'
    applicationDefaultJvmArgs += ['-Dprism.forceUploadingPainter=true']
}

tasks.register('launch', JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'app.Launcher'
}

tasks.register('zipAssets', Zip) {
    delete(file("src/main/resources/io/github/palexdev/architectfx/frontend/assets/assets.zip"))

    destinationDirectory = file("src/main/resources/io/github/palexdev/architectfx/frontend/assets")
    archiveFileName = "assets.zip"

    from "src/main/resources/io/github/palexdev/architectfx/frontend/css"

    outputs.upToDateWhen { false }

    doLast {
        copy {
            from archiveFile
            into "${file(layout.buildDirectory)}/resources/main/io/github/palexdev/architectfx/frontend/assets"
        }
    }
}

sourcesJar.dependsOn(zipAssets)
processResources.finalizedBy(zipAssets)

// Compile-time DI configuration
def generatedSources = "${file(layout.buildDirectory)}/generated/sources"
def generatedOutputDir = file("$generatedSources")

compileJava {
    doFirst {
        generatedOutputDir.exists() || generatedOutputDir.mkdirs()
        options.compilerArgs = [
                '-s', "${generatedSources}"
        ]
    }
}

sourceSets {
    main {
        java {
            srcDirs += generatedOutputDir
        }
    }
}

sourcesJar.dependsOn(compileJava)
compileTestJava.dependsOn(sourcesJar)

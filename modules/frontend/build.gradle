import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'application'
    id 'org.beryx.jlink'
    id 'com.gradleup.shadow'
}

dependencies {
    implementation(project(":backend"))

    implementation "io.github.palexdev:mfxcore:$mfxcore"
    implementation "io.github.palexdev:mfxcomponents:$materialfx"
    implementation "io.github.palexdev:virtualizedfx:$virtualizedfx"
    implementation "io.github.palexdev:rectcut-java:$rectcut"
    implementation "fr.brouillard.oss:cssfx:$cssfx"

    implementation "io.github.palexdev:imcache:$imcache"

    implementation name: 'directory-watcher-0.19.0'
    implementation name: 'directory-watcher-0.19.0', classifier: 'sources'
}

javafx {
    modules = ['javafx.fxml', 'javafx.graphics', 'javafx.swing']
}

application {
    mainModule = 'afx.frontend'
    mainClass = 'io.github.palexdev.architectfx.frontend.ArchitectFX'
    applicationDefaultJvmArgs += ['-Dprism.forceUploadingPainter=true']
}

tasks.register('launch', JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'app.Launcher'
}

tasks.register('zipAssets', Zip) {
    delete(file("src/main/resources/io/github/palexdev/architectfx/frontend/assets/assets.zip"))

    destinationDirectory = file("src/main/resources/io/github/palexdev/architectfx/frontend/assets")
    archiveFileName = "assets.zip"

    from "src/main/resources/io/github/palexdev/architectfx/frontend/css"
    from ("src/main/resources/io/github/palexdev/architectfx/frontend/assets") {
        exclude "assets.zip"
        into "assets"
    }

    outputs.upToDateWhen { false }

    doLast {
        copy {
            from archiveFile
            into "${file(layout.buildDirectory)}/resources/main/io/github/palexdev/architectfx/frontend/assets"
        }
    }
}

sourcesJar.dependsOn(zipAssets)
processResources.finalizedBy(zipAssets)

// Compile-time DI configuration
def generatedSources = "${file(layout.buildDirectory)}/generated/sources"
def generatedOutputDir = file("$generatedSources")

compileJava {
    doFirst {
        delete generatedOutputDir
        generatedOutputDir.mkdirs()
        options.compilerArgs = [
                '-s', "${generatedSources}"
        ]
    }
}

sourceSets {
    main {
        java {
            srcDirs += generatedOutputDir
        }
    }
}

sourcesJar.dependsOn(compileJava)
compileTestJava.dependsOn(sourcesJar)

artifacts {
    archives javadocJar
    archives sourcesJar
    archives jar
    archives shadowJar
}

shadowJar {
    mergeServiceFiles()
    dependencies {
        exclude {
            it.moduleGroup in List.of('com.ibm.icu')
        }
    }
}

jlink {
    def os
    if (project.hasProperty('os')) {
        os = project.getProperty('os')
    } else {
        os = getOS()
    }
    if (os == null)
        throw new IllegalStateException("Unknown os")

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'ArchitectFX'
    }

    addExtraDependencies("javafx")
    forceMerge("jresolve")
    forceMerge("tinylog")
    forceMerge("slf4j")

    mergedModule {
        requires 'java.net.http';
        requires 'java.management';
        requires 'javafx.graphics';
        requires 'java.naming';
        requires 'java.logging';
        requires 'java.sql';
        requires 'java.prefs';
        requires 'java.xml';
        requires 'java.desktop';
        requires 'javafx.base';
        requires 'jdk.unsupported';
        uses 'org.slf4j.spi.SLF4JServiceProvider';
        uses 'org.tinylog.policies.Policy';
        uses 'org.tinylog.converters.FileConverter';
        uses 'org.tinylog.configuration.ConfigurationLoader';
        uses 'org.tinylog.provider.LoggingProvider';
        uses 'org.tinylog.writers.Writer';
        provides 'org.tinylog.converters.FileConverter' with 'org.tinylog.converters.GzipFileConverter';
        provides 'org.tinylog.provider.LoggingProvider' with 'org.tinylog.core.TinylogLoggingProvider';
        provides 'org.slf4j.spi.SLF4JServiceProvider' with 'org.tinylog.slf4j.TinylogSlf4jServiceProvider';
        provides 'org.tinylog.configuration.ConfigurationLoader' with 'org.tinylog.configuration.PropertiesConfigurationLoader';
    }

    jpackage {
        appVersion = "$appVer"
        installerName = 'ArchitectFX'
        description = 'ArchitectFX is a new tool with a modern and pleasant interface, which allows' +
                'to easily and quickly build and prototype views for JavaFX.' +
                'UIs are declared in a clear and concise custom DSL called JUI (Java User Interface), ' +
                'its syntax is based on Java and Groovy'
        vendor = 'palexdev'
        icon = "src/main/resources/io/github/palexdev/architectfx/frontend/assets/icon.ico"

        if (os == 'windows') {
            installerOptions += [
                    "--win-help-url", "https://github.com/palexdev/ArchitectFX",
                    "--win-dir-chooser",
                    "--win-menu",
                    "--win-per-user-install",
                    "--win-shortcut",
                    "--win-shortcut-prompt",
            ]
        }

        if (os == 'linux') {
            installerOptions += [
                    "--linux-package-name", "ArchitectFX",
                    "--linux-menu-group", '"Development;Building;GUIDesigner;Java;"',
                    "--install-dir", "/opt",
                    "--linux-shortcut"
            ]
        }
    }
}

static String getOS() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return 'windows'
    }
    if (Os.isFamily(Os.FAMILY_UNIX)) {
        return 'linux'
    }
    if (Os.isFamily(Os.FAMILY_MAC)) {
        return 'macos'
    }
    return null
}
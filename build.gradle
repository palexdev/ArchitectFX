import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version "$jfxPlugin" apply false
}

subprojects {
    apply plugin: "java"
    apply plugin: "org.openjfx.javafxplugin"

    group 'io.github.palexdev'

    repositories {
        mavenCentral()

        flatDir {
            dirs "$rootDir/libs"
            dirs "$rootDir/libs/jresolve"
            dirs "$rootDir/libs/nfx-lib"
            dirs "$rootDir/libs/pragmatica"
        }
    }

    dependencies {
        // Standard
        // Inverno Framework :D
        annotationProcessor "io.inverno:inverno-core-compiler:$inverno"
        implementation "io.inverno:inverno-core:$inverno"
        implementation "org.tinylog:tinylog-impl:$tinylog"
        //implementation "org.tinylog:slf4j-tinylog:$tinylog"

        implementation name: 'pragmatica-core-0.3.0'
        implementation name: 'pragmatica-core-0.3.0', classifier: 'sources'

        // Test
        testImplementation platform("org.junit:junit-bom:$junit")
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation "org.testfx:testfx-core:$testfx"
        testImplementation "org.testfx:testfx-junit5:$testfx"
        testImplementation "org.testfx:openjfx-monocle:$testfxMonocle"
        testImplementation "org.openjdk.jmh:jmh-core:$jmh"
        testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$jmh"
    }

    java {
        sourceCompatibility = "$jdk"
        targetCompatibility = "$jdk"
        withJavadocJar()
        withSourcesJar()
    }

    javafx {
        // Workaround for Linux ARM64 because JavaFX is not updated as often for this architecture
        var isLinuxArm = (Os.isFamily(Os.FAMILY_UNIX)) && "aarch64".equals(System.getProperty("os.arch"))
        version = isLinuxArm ? "21.0.1" : "$jfx"
        configurations = ['implementation', 'testImplementation']
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        systemProperty('test.environment', 'true')
    }

    tasks.withType(Javadoc) {
        javadocTool.set(
                javaToolchains.javadocToolFor(
                        java.toolchain
                )
        )
        failOnError = false
        options.addBooleanOption('Xdoclint:all,-missing', true)
    }

    // Since we are using a compile time DI framework, everytime the code changes
    compileJava {
        doFirst {
            if (!classes.state.upToDate)
                clean
        }
    }
}
